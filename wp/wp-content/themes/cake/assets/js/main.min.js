"use strict"
document.addEventListener("DOMContentLoaded", () =>{window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||window;for(var o=0;o<this.length;o++)e.call(t,this[o],o,this)});var items=document.querySelectorAll(".cake__item");[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach(function(e){e.hasOwnProperty("append")||Object.defineProperty(e,"append",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=Array.prototype.slice.call(arguments),o=document.createDocumentFragment();e.forEach(function(e){var t=e instanceof Node;o.appendChild(t?e:document.createTextNode(String(e)))}),this.appendChild(o)}})}),function(){var e=[window.Element,window.CharacterData,window.DocumentType],t=[];e.forEach(function(e){e&&t.push(e.prototype)}),t.forEach(function(e){e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})})}();try{var btn=document.querySelector(".menu__menu"),block=document.querySelector(".menu__list");btn.addEventListener("click",function(){btn.classList.toggle("menu__menu-active"),btn.classList.contains("menu__menu-active")?block.style.display="block":block.style.display="none"})}catch(e){}try{var addClass=function(e,o,c){document.querySelectorAll(e).forEach(function(e){var t;e.classList.add(o),c&&((t=document.createElement("div")).classList.add(c),e.append(t))})};addClass(".footer li","footer__item","footer__line"),addClass(".header .header__list li","header__item","header__line"),addClass(".header__list-hamburger li","header__item-hamburger",!1);try{var burgerActive=document.createElement("div");burgerActive.classList.add("burger-line"),document.querySelector(".burger-active").append(burgerActive)}catch(e){}}catch(e){}var category=document.querySelectorAll(".taxonomy.category_menu"),spans=document.querySelectorAll(".current-item");category.forEach(function(e){e.classList.add("infoTorts__home")}),spans.forEach(function(e){e.classList.add("infoTorts__next")});try{items.forEach(function(e){e.addEventListener("mouseover",function(e){var t,o=e.target.closest(".cake__item");if(o&&!o.querySelector(".cake__info")){switch(o.dataset.element){case"1":t="cake__goRight";break;case"2":t="cake__goCenter";break;case"3":t="cake__goLeft"}e=document.createElement("div");e.classList.add("cake__info"),e.classList.add(t),console.log(e),e.innerHTML='\n                <h3 class="cake__title">'.concat(o.dataset.name,'</h3>\n                <p class="cake__description">').concat(o.dataset.info,'</p>\n                <div class="cake__footer">\n                <span class="cake__gram">').concat(o.dataset.gramm,' г.</span>\n                <span class="cake__price">').concat(o.dataset.price," р.</span>\n                "),o.append(e)}})}),items.forEach(function(e){e.addEventListener("mouseleave",function(e){document.querySelector(".cake__info").remove()})})}catch(e){}try{var changeCheckBox=function(e,c,a,t){var n=document.querySelector(e),i=document.querySelector(t);n.addEventListener("click",function(e){var t=n.querySelector(c),o=n.querySelector(a);t.checked?(t.checked=!1,o.classList.remove("application__checkbox-bad-block-active"),i.classList.add("modal__disabled"),i.classList.remove("modal__submit"),i.setAttribute("disabled","true")):(t.checked=!0,o.classList.add("application__checkbox-bad-block-active"),i.classList.remove("modal__disabled"),i.classList.add("modal__submit"),i.removeAttribute("disabled"))})};try{changeCheckBox(".application__label-checkbox",".application__checkbox-bad",".application__checkbox-bad-block",".application__submit")}catch(e){}try{changeCheckBox(".modal__label",".modal__checkbox",".application__checkbox-bad-block",".modal__button")}catch(e){}}catch(e){}$("form").on("submit",function(e){e.preventDefault();var e=$(this).serializeArray(),a=$(this).attr("action"),t=!0;"application_fun"===a&&document.querySelectorAll(".application__checkbox").forEach(function(e){t=!!e.checked}),t?$.post(myajax.url,{form:e,action:a},function(e){for(var t,o,c=0;c<$("form").length;c++)$("form")[c].reset(),document.querySelectorAll(".placeholder").forEach(function(e){e.style.display="block"});"application_fun"===a?((t=document.createElement("div")).classList.add("goodFetch"),t.textContent="Успешно.Ваша заявка отправлена",document.querySelector(".application__form").append(t),setTimeout(function(){t.remove()},4e3)):"page-cont"===a&&(document.querySelector(".modal__content").style.display="none",(o=document.createElement("div")).classList.add("goodFetch"),o.textContent="Успешно.Ваша заявка отправлена",document.querySelector(".modal__dialog").append(o),setTimeout(function(){o.remove(),document.querySelector(".modal__content").style.display="block"},4e3))}):alert("Выберите скидку")});try{var checkbox=document.querySelector(".modal__checkbox"),btnSubmit=document.querySelector(".modal__button"),applicationCheckBox=document.querySelector(".application__checkbox-bad"),applicationSubmit=document.querySelector(".application__submit");try{checkbox.addEventListener("change",function(){checkbox.checked?(btnSubmit.classList.remove("modal__disabled"),btnSubmit.classList.add("modal__submit"),btnSubmit.removeAttribute("disabled")):(btnSubmit.classList.add("modal__disabled"),btnSubmit.setAttribute("disabled","true"),btnSubmit.classList.remove("modal__submit"))})}catch(e){}}catch(e){}try{document.querySelector(".menu-icon").addEventListener("click",function(e){e.target.closest(".menu-icon").classList.toggle("clicked"),document.querySelector(".menu-icon").classList.contains("clicked")?document.querySelector(".header__list-hamburger").classList.add("active-list","header__list-hamburger-animate"):document.querySelector(".header__list-hamburger").classList.remove("active-list")})}catch(e){}try{var iframe=document.createElement("iframe")}catch(e){}try{$(window).scroll(function(){$(document).scrollTop()>$(document).height()-1100&&!$("body").hasClass("loading")&&"undefined"!=typeof true_posts&&(console.log(true_posts),$("body").addClass("loading"),$.post(myajax.url,{action:"news_loadmore",query:true_posts||"",page:current_page||""},function(e){e?(current_page++,$(".menu__loading").before(e),$("body").removeClass("loading")):$(".menu__loading").remove()}))})}catch(e){}try{var btns=document.querySelector(".tort__items"),modal=document.querySelector(".modal"),dialog=document.querySelector(".modal__dialog"),_block=document.querySelector(".modal__block");btns.addEventListener("click",function(e){var t;e.target.closest(".tort__item")&&(document.body.style.overflow="hidden",modal.style.transition="all 1s",modal.style.overflow="auto",modal.classList.add("modal-active"),t=e.target.closest(".tort__item"),(e=document.createElement("div")).classList.add("modal__infoTort"),e.innerHTML='\n                <h2 class="modal__title">Онлайн заказ торта</h2>\n                <div class="modal__info">\n                    <div class="modal__img-block">\n                        <img src="'.concat(t.dataset.img,'" alt="tort" class="modal__img">\n                    </div>\n                    <div class="modal__description">\n                        <h5 class="modal__name">').concat(t.dataset.nameTort,'</h5>\n                        <p class="modal__text">\n                            ').concat(t.dataset.description,'\n                        </p>\n                    </div>\n                </div>\n                <div class="modal__bottom">\n                    <div class="modal__line"></div>\n                    <div class="modal__opis">\n                        <div class="modal__gram">').concat(t.dataset.kg,' кг.</div>\n                        <div class="modal__price">').concat(t.dataset.rub," ₽</div>\n                    </div>\n                </div>\n            "),_block.append(e),(e=document.createElement("input")).classList.add("input__hidden"),e.value=t.dataset.nameTort,e.setAttribute("name","tort"),document.querySelector(".hidden__label").append(e))}),modal.addEventListener("click",function(e){(e.target.classList.contains("modal")||e.target.classList.contains("modal_close"))&&(document.body.style.overflow="",modal.style.transition="none",modal.classList.remove("modal-active"),modal.querySelector(".modal__infoTort").remove(),document.querySelector(".hidden__label").querySelector(".input__hidden").remove())})}catch(e){}try{var conts=document.querySelectorAll(".cont"),inputs=document.querySelector(".application").querySelectorAll(".application-input");conts.forEach(function(e){e.addEventListener("click",function(e){e.target.classList.contains("placeholder")&&e.target.previousElementSibling.focus()})}),inputs.forEach(function(e){e.addEventListener("focus",function(e){e.target.nextElementSibling.style.display="none"}),e.addEventListener("blur",function(e){""==e.target.value.trim()&&(e.target.nextElementSibling.style.display="block")})})}catch(e){}try{var labels=document.querySelectorAll(".application__label");labels.forEach(function(e){e.addEventListener("click",function(e){var t=e.target.closest(".application__label").querySelector(".application__checkbox"),e=e.target.closest(".application__label").querySelector(".application__checkbox-block");t.checked||(console.log("true"),document.querySelectorAll(".application__checkbox-block").forEach(function(e){e.classList.remove("application__checkbox-block-active")}),document.querySelectorAll(".application__checkbox").forEach(function(e){e.checked=!1}),e.classList.add("application__checkbox-block-active"),t.checked=!0)})})}catch(e){}window.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||window;for(var o=0;o<this.length;o++)e.call(t,this[o],o,this)});try{!function(e){e.matches=e.matches||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector,e.closest=e.closest||function(e){return this?this.matches(e)?this:this.parentElement?this.parentElement.closest(e):null:null}}(Element.prototype);var swiper=new Swiper(".swiper-container",{slidesPerView:1,spaceBetween:30,loop:!0,pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}})}catch(e){}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
})